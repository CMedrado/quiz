// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	httprank "quiz/app/http/rank"
	usecasesrank "quiz/domain/usecases/rank"
	"sync"
)

// Ensure, that GetPlayerPositionUseCaseMock does implement httprank.GetPlayerPositionUseCase.
// If this is not the case, regenerate this file with moq.
var _ httprank.GetPlayerPositionUseCase = &GetPlayerPositionUseCaseMock{}

// GetPlayerPositionUseCaseMock is a mock implementation of httprank.GetPlayerPositionUseCase.
//
//	func TestSomethingThatUsesGetPlayerPositionUseCase(t *testing.T) {
//
//		// make and configure a mocked httprank.GetPlayerPositionUseCase
//		mockedGetPlayerPositionUseCase := &GetPlayerPositionUseCaseMock{
//			GetPlayerPositionFunc: func(ctx context.Context, input usecasesrank.GetPlayerPositionInput) (usecasesrank.GetPlayerPositionOutput, error) {
//				panic("mock out the GetPlayerPosition method")
//			},
//		}
//
//		// use mockedGetPlayerPositionUseCase in code that requires httprank.GetPlayerPositionUseCase
//		// and then make assertions.
//
//	}
type GetPlayerPositionUseCaseMock struct {
	// GetPlayerPositionFunc mocks the GetPlayerPosition method.
	GetPlayerPositionFunc func(ctx context.Context, input usecasesrank.GetPlayerPositionInput) (usecasesrank.GetPlayerPositionOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPlayerPosition holds details about calls to the GetPlayerPosition method.
		GetPlayerPosition []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input usecasesrank.GetPlayerPositionInput
		}
	}
	lockGetPlayerPosition sync.RWMutex
}

// GetPlayerPosition calls GetPlayerPositionFunc.
func (mock *GetPlayerPositionUseCaseMock) GetPlayerPosition(ctx context.Context, input usecasesrank.GetPlayerPositionInput) (usecasesrank.GetPlayerPositionOutput, error) {
	callInfo := struct {
		Ctx   context.Context
		Input usecasesrank.GetPlayerPositionInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockGetPlayerPosition.Lock()
	mock.calls.GetPlayerPosition = append(mock.calls.GetPlayerPosition, callInfo)
	mock.lockGetPlayerPosition.Unlock()
	if mock.GetPlayerPositionFunc == nil {
		var (
			getPlayerPositionOutputOut usecasesrank.GetPlayerPositionOutput
			errOut                     error
		)
		return getPlayerPositionOutputOut, errOut
	}
	return mock.GetPlayerPositionFunc(ctx, input)
}

// GetPlayerPositionCalls gets all the calls that were made to GetPlayerPosition.
// Check the length with:
//
//	len(mockedGetPlayerPositionUseCase.GetPlayerPositionCalls())
func (mock *GetPlayerPositionUseCaseMock) GetPlayerPositionCalls() []struct {
	Ctx   context.Context
	Input usecasesrank.GetPlayerPositionInput
} {
	var calls []struct {
		Ctx   context.Context
		Input usecasesrank.GetPlayerPositionInput
	}
	mock.lockGetPlayerPosition.RLock()
	calls = mock.calls.GetPlayerPosition
	mock.lockGetPlayerPosition.RUnlock()
	return calls
}
