// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	httprank "quiz/app/http/rank"
	usecasesrank "quiz/domain/usecases/rank"
	"sync"
)

// Ensure, that GetLeaderboardUseCaseMock does implement httprank.GetLeaderboardUseCase.
// If this is not the case, regenerate this file with moq.
var _ httprank.GetLeaderboardUseCase = &GetLeaderboardUseCaseMock{}

// GetLeaderboardUseCaseMock is a mock implementation of httprank.GetLeaderboardUseCase.
//
//	func TestSomethingThatUsesGetLeaderboardUseCase(t *testing.T) {
//
//		// make and configure a mocked httprank.GetLeaderboardUseCase
//		mockedGetLeaderboardUseCase := &GetLeaderboardUseCaseMock{
//			GetLeaderboardFunc: func(ctx context.Context) (usecasesrank.GetLeaderboardOutput, error) {
//				panic("mock out the GetLeaderboard method")
//			},
//		}
//
//		// use mockedGetLeaderboardUseCase in code that requires httprank.GetLeaderboardUseCase
//		// and then make assertions.
//
//	}
type GetLeaderboardUseCaseMock struct {
	// GetLeaderboardFunc mocks the GetLeaderboard method.
	GetLeaderboardFunc func(ctx context.Context) (usecasesrank.GetLeaderboardOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLeaderboard holds details about calls to the GetLeaderboard method.
		GetLeaderboard []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetLeaderboard sync.RWMutex
}

// GetLeaderboard calls GetLeaderboardFunc.
func (mock *GetLeaderboardUseCaseMock) GetLeaderboard(ctx context.Context) (usecasesrank.GetLeaderboardOutput, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLeaderboard.Lock()
	mock.calls.GetLeaderboard = append(mock.calls.GetLeaderboard, callInfo)
	mock.lockGetLeaderboard.Unlock()
	if mock.GetLeaderboardFunc == nil {
		var (
			getLeaderboardOutputOut usecasesrank.GetLeaderboardOutput
			errOut                  error
		)
		return getLeaderboardOutputOut, errOut
	}
	return mock.GetLeaderboardFunc(ctx)
}

// GetLeaderboardCalls gets all the calls that were made to GetLeaderboard.
// Check the length with:
//
//	len(mockedGetLeaderboardUseCase.GetLeaderboardCalls())
func (mock *GetLeaderboardUseCaseMock) GetLeaderboardCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetLeaderboard.RLock()
	calls = mock.calls.GetLeaderboard
	mock.lockGetLeaderboard.RUnlock()
	return calls
}
